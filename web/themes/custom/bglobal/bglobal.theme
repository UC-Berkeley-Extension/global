<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bglobal_theme_suggestions_html_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($theme_name = bglobal_get_active_microsite($node)) {
      $suggestions[] = 'html__' . 'school_' . $theme_name;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bglobal_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__node__' . $content_type;
    if ($theme_name = bglobal_get_active_microsite($node)) {
      $suggestions[] = 'page__school_' . $theme_name;
      $suggestions[] = 'page__node__' . $content_type . '__school_' . $theme_name;
    }
  }
}

/**
 * Derive the active sub-theme for this request.
 *
 * This function can be used as a lookup by any theme alter hook that needs to
 * make template suggestions for variation by school. The lookup will run the
 * first time this function is invoked and cache the result for the rest of the
 * request.
 *
 * @param \Drupal\node\NodeInterface $node
 *
 * @return string
 *   A string name for the sub-theme (e.g. 'hass').
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function bglobal_get_active_microsite(NodeInterface $node) {
  static $theme_name = NULL;
  if (!is_null($theme_name)) {
    return $theme_name;
  }
  $theme_name = '';
  // Get the taxonomy term.
  if ($node->hasField('field_term_ref_school_microsite') && $node->get('field_term_ref_school_microsite')->getValue()) {
    /** @var \Drupal\taxonomy\TermInterface $term */
    $term = $node->get('field_term_ref_school_microsite')->first()->entity;
    if ($term->hasField('field_microsite_theme_name')) {
      $name = current($term->get('field_microsite_theme_name')->getValue());
      if (!empty($name['value']) && $name['value'] !== 'default-theme') {
        $theme_name = strtolower(str_replace(['_', ' '], '-', $name['value']));
      }
    }
  }

  return $theme_name;
}

function bglobal_preprocess_menu(&$variables) {
  $menu_names = [
    'main',
    'haas-main-menu'
  ];
  if (!in_array($variables['menu_name'], $menu_names)) {
    return;
  }
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
  foreach ($variables['items'] as &$item) {
    /** @var \Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $menu_link_plugin */
    $menu_link_plugin = $item['original_link'];
    $r = new ReflectionObject($menu_link_plugin);
    $method = $r->getMethod('getEntity');
    $method->setAccessible(TRUE);
    /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $menu_link */
    $menu_link = $method->invoke($menu_link_plugin);
    $item['attributes']->addClass("menu-depth-" . bglobal_get_menu_link_content_depth($menu_link));
    $item['has_children'] = (bool) $storage->loadByProperties(['parent' => $menu_link->getPluginId()]);
  }
}

function bglobal_get_menu_link_content_depth(MenuLinkContent $menu_link, $depth = 0) {
  /** @var \Drupal\Core\Entity\EntityRepository $repository */
  $repository = \Drupal::service('entity.repository');
  if ($menu_link->get('parent')->getValue()) {
    [$entity_type, $uuid] = explode(':', $menu_link->get('parent')->first()->getValue()['value']);
    if (!$entity_type) {
      return $depth;
    }
    $parent = $repository->loadEntityByUuid($entity_type, $uuid);
    $depth++;
    bglobal_get_menu_link_content_depth($parent, $depth);
  }
  return $depth;
}
