<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Layout\LayoutDefault;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bglobal_theme_suggestions_html_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($theme_name = bglobal_get_active_microsite($node)) {
      $suggestions[] = 'html__' . 'school_' . $theme_name;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bglobal_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__node__' . $content_type;
    if ($theme_name = bglobal_get_active_microsite($node)) {
      $suggestions[] = 'page__school_' . $theme_name;
      $suggestions[] = 'page__node__' . $content_type . '__school_' . $theme_name;
    }
  }
}

/**
 * Derive the active sub-theme for this request.
 *
 * This function can be used as a lookup by any theme alter hook that needs to
 * make template suggestions for variation by school. The lookup will run the
 * first time this function is invoked and cache the result for the rest of the
 * request.
 *
 * @param \Drupal\node\NodeInterface $node
 *
 * @return string
 *   A string name for the sub-theme (e.g. 'hass').
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function bglobal_get_active_microsite(NodeInterface $node) {
  static $theme_name = NULL;
  if (!is_null($theme_name)) {
    return $theme_name;
  }
  $theme_name = '';
  // Get the taxonomy term.
  if ($node->hasField('field_term_ref_school_microsite') && $node->get('field_term_ref_school_microsite')->getValue()) {
    /** @var \Drupal\taxonomy\TermInterface $term */
    $term = $node->get('field_term_ref_school_microsite')->first()->entity;
    if ($term->hasField('field_microsite_theme_name')) {
      $name = current($term->get('field_microsite_theme_name')->getValue());
      if (!empty($name['value']) && $name['value'] !== 'default-theme') {
        $theme_name = strtolower(str_replace(['_', ' '], '-', $name['value']));
      }
    }
  }

  return $theme_name;
}

function bglobal_preprocess_menu(&$variables) {
  $menu_names = [
    'main',
    'haas-main-menu'
  ];
  if (!in_array($variables['menu_name'], $menu_names)) {
    return;
  }
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
  foreach ($variables['items'] as &$item) {
    /** @var \Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $menu_link_plugin */
    $menu_link_plugin = $item['original_link'];
    $r = new ReflectionObject($menu_link_plugin);
    $method = $r->getMethod('getEntity');
    $method->setAccessible(TRUE);
    /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $menu_link */
    $menu_link = $method->invoke($menu_link_plugin);
    $item['attributes']->addClass("menu-depth-" . bglobal_get_menu_link_content_depth($menu_link));
    $item['has_children'] = (bool) $storage->loadByProperties(['parent' => $menu_link->getPluginId()]);
  }
}

function bglobal_get_menu_link_content_depth(MenuLinkContent $menu_link, $depth = 0) {
  /** @var \Drupal\Core\Entity\EntityRepository $repository */
  $repository = \Drupal::service('entity.repository');
  if ($menu_link->get('parent')->getValue()) {
    [$entity_type, $uuid] = explode(':', $menu_link->get('parent')
      ->first()
      ->getValue()['value']);
    if (!$entity_type) {
      return $depth;
    }
    $parent = $repository->loadEntityByUuid($entity_type, $uuid);
    $depth++;
    bglobal_get_menu_link_content_depth($parent, $depth);
  }
  return $depth;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bglobal_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Provide suggestion for block templates by custom block type.
  if (!empty($variables['elements']['content']['#block_content'])) {
    $block = $variables['elements']['content']['#block_content'];
    // Add `block--BLOCK-TYPE.html.twig`.
    $suggestions[] = 'block__' . $block->bundle();
    $view_mode = $variables['elements']['#configuration']['view_mode'];
    if (!empty($view_mode)) {
      // Add `block--BLOCK-TYPE--VIEW-MODE.html.twig`.
      $suggestions[] = 'block__' . $block->bundle() . '__' . $view_mode;
    }
  }
}

/**
 * Implements hook_form_FORM_NAME_alter.
 *
 * Adds classes field on Layout Builder configuration section form.
 */
function bglobal_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  $r = new ReflectionObject($form_object);
  $property = $r->getProperty('layout');
  $property->setAccessible(TRUE);
  $layout = $property->getValue($form_object);
  if (!$layout instanceof LayoutDefault) {
    return;
  }
  $form['layout_settings']['class'] = [
    // Change type to 'textfield' for text box form field.
    '#type' => 'checkboxes',
    '#title' => t('Add Classes'),
    '#default_value' => $layout->getConfiguration()['class'] ?? '',
    // List of classes that can be added. Remove if using text box.
    '#options' => [
      'bg-light' => t('Background Light'),
      'bg-teal' => t('Background Teal'),
    ]
  ];
  array_unshift($form['#submit'],'bglobal_form_layout_builder_configure_section_submit');
}

/**
 * A custom submit handler for our custom layout section configure elements.
 *
 * Saves extra classes to Layout Builder layout configuration.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @throws \ReflectionException
 */
function bglobal_form_layout_builder_configure_section_submit(&$form, FormStateInterface $form_state) {
  $classes = $form_state->getValue(['layout_settings', 'class']);
  if (!$classes) {
    return;
  }
  $form_object = $form_state->getFormObject();
  $r = new ReflectionObject($form_object);
  $property = $r->getProperty('layout');
  $property->setAccessible(TRUE);
  $layout = $property->getValue($form_object);
  if (!$layout instanceof LayoutDefault) {
    return;
  }
  $config = $layout->getConfiguration();
  $config['class'] = $classes;
  $layout->setConfiguration($config);
}

/**
 * Implements hook_preprocess_layout.
 *
 * Adds extra classes to Layout Builder layout attributes from configuration.
 */
function bglobal_preprocess_layout(&$variables) {
  if (empty($variables['settings']['class'])) {
    return;
  }
  // Use this line if you want a textfield instead of checkboxes in the form.
  //$variables['attributes']['class'] = array_merge($variables['attributes']['class'], explode(' ', $variables['settings']['class']));
  // Use for checkboxes form element.
  $variables['attributes']['class'] = array_merge($variables['attributes']['class'] ?? [], $variables['settings']['class']);
}
