// // Grid breakpoints
// //
// // Define the minimum dimensions at which your layout will change,
// // adapting to different screen sizes, for use in media queries.

$grid-breakpoints: (
  xxs: 0,
  xs: 440px,
  sm: 768px,
  md: 992px,
  lg: 1200px,
  xl: 1500px,
  xxl: 2000px
) !default;

//== Media queries breakpoints
//
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Extra small screen / phone
//** Deprecated `$screen-xs` as of v3.0.1
$screen-xs:                  480px;
//** Deprecated `$screen-xs-min` as of v3.2.0
$screen-xs-min:              $screen-xs;
//** Deprecated `$screen-phone` as of v3.0.1
$screen-phone:               $screen-xs-min;

// Small screen / tablet
//** Deprecated `$screen-sm` as of v3.0.1
$screen-sm:                  768px;
$screen-sm-min:              $screen-sm;
//** Deprecated `$screen-tablet` as of v3.0.1
$screen-tablet:              $screen-sm-min;

// Medium screen / desktop
//** Deprecated `$screen-md` as of v3.0.1
$screen-md:                  992px;
$screen-md-min:              $screen-md;
//** Deprecated `$screen-desktop` as of v3.0.1
$screen-desktop:             $screen-md-min;

// Large screen / wide desktop
//** Deprecated `$screen-lg` as of v3.0.1
$screen-lg:                  1200px;
$screen-lg-min:              $screen-lg;
//** Deprecated `$screen-lg-desktop` as of v3.0.1
$screen-lg-desktop:          $screen-lg-min;

// So media queries don't overlap when required, provide a maximum
$screen-xs-max:              ($screen-sm-min - 1);
$screen-sm-max:              ($screen-md-min - 1);
$screen-md-max:              ($screen-lg-min - 1);

// Padding
$padding-row:   2em 0;
.padding-row { padding: $padding-row;}
//== Grid system
//
//## Define your custom responsive grid.

//** Number of columns in the grid.
$grid-columns:              12;
//** Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width:         30px;
// Navbar collapse
//** Point at which the navbar becomes uncollapsed.
$grid-float-breakpoint:     $screen-sm-min;
//** Point at which the navbar begins collapsing.
$grid-float-breakpoint-max: ($grid-float-breakpoint - 1);

// // Spacing
// //
// // Control the default styling of most Bootstrap elements by modifying these
// // variables. Mostly focused on spacing.
// // You can add more entries to the $spacers map, should you need more variation.
$spacer: 1rem !default;
$spacers: () !default;
// stylelint-disable-next-line scss/dollar-variable-default
$spacers: map-merge(
  (
    0: 0,
    1: ($spacer * .25),
    2: ($spacer * .5),
    3: $spacer,
    4: ($spacer * 1.5),
    5: ($spacer * 3)
  ),
  $spacers
);
// // Grid columns
// //
// // Set the number of columns and specify the width of the gutters.
// $grid-columns:                12 !default;
$grid-gutter-width:           $spacer * 4 !default;
// Using --spacer-lg instead to make it responsive
$columns: () !default;
// stylelint-disable-next-line scss/dollar-variable-default
$columns: map-merge(
  (
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
  ),
  $columns
);

@media (max-width: map-get($grid-breakpoints, "sm")) {
  .d-mobile-none {
    display: none;
  }
}

// MIXINS
@mixin column-variants($parent, $column) {
  #{$parent} {
    display: grid;
    grid-gap: var(--spacer-lg);
    @media (min-width: map-get($grid-breakpoints, "sm")){ 
      grid-template-columns: repeat($column, minmax(auto, calc(100% / #{$column})));
    }
  }
}
@mixin containerize() {
  max-width: 1200px;
  width: 100%;
  grid-column-start: col1;
}

// CONSTRUCTORS
@each $column, $value in $columns {
  @include column-variants(".grid-col-#{$column}", $value);
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Below rule breaks Drupal admin toolbar.
//article, details, hgroup, main, menu, nav, summary, #infoRow #contentModule9, #footer {
//  // Removed figure and figaption because department contact box on certs didn't need to be like this
//  // removed section cause it was messing up when I tried to put things in landmarks
//  display: flex;
//  align-items: center;
//  flex-direction: column;
//
//  & > * {
//    @include containerize();
//  }
//}

#pageContainer > section, #footer { // removed main because most times it seems to be excessive
  padding: var(--spacer-md) 0;
}


/* Grid layouts */

.grid-full {
  width: 100%; 
  // @supports is a sass rule that checks for browser support
  // https://sass-lang.com/documentation/at-rules/css#supports
  @supports (display: grid) { grid-column: col1/col12; }
}

.grid-half { 
  width: 50%;
  @supports (display: grid) {
    grid-column: col1 / span 12;
    width: initial;
    @media only screen and (min-width: map-get($grid-breakpoints, "sm")) {
      grid-column: span 6;
      &:first-child {
        grid-column-start: col1;
        grid-column-end: span 6;
      }
    }
    & > * {
      width: 100%;
    }
  }
}

.grid-container {
  display: flex; // MS Fallbacks
  flex-wrap: wrap; // MS Fallbacks
  width: 100%; // MS Fallbacks  
  align-items: flex-start; // This was intended to be for #content10Container, but maybe it should apply more broadly?
  max-width: 1200px;
  margin: 0 auto;
  @supports (display: grid) {
    display: grid;
    grid-template-columns: var(--spacer-md, 10px) repeat(12, 1fr) var(--spacer-md, 10px);
    grid-template-areas:
        ". col1 col2 col3 col4 col5 col6 col7 col8 col9 col10 col11 col12 .";
    //padding: 0px; // Deleted cause it removed the footer's marign. Why is this needed?
    grid-gap: 10px;
    & > .half {
      @extend .grid-half;
    }
  }
}

.grid-container-fluid {
  display: flex; // MS Fallbacks
  flex-wrap: wrap; // MS Fallbacks  
  width: 100%; // MS Fallbacks
  align-items: flex-start; // This was intended to be for #content10Container, but maybe it should apply more broadly?
  & > h1, & > h2, & > h3, & > h4, & > h5, & > h6, & > h7, & > .full {
    @extend .grid-full;
  }
  & > .half {
    @extend .grid-half;
  }
  @supports (display: grid) {
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    grid-template-areas:
        "col1 col2 col3 col4 col5 col6 col7 col8 col9 col10 col11 col12";
    padding: 0px;
    grid-gap: 10px;
    // margin: 0px; reintroduce later, curently at bottom of cascade and taking too much importance
  }
  > * {
    width: 100%;
    grid-column: col1 / col12;
  }
}

@media only screen and (min-width: map-get($grid-breakpoints, "md")) {
  .grid-flip {
    display:grid;
    grid-column-gap: 50px;
    grid-template-columns: 175px 1fr;
    // float:left; fallback for IE
  }
  .grid-flip-no-gap {
    grid-column-gap: 0px;
  }
}


// Grid Elements
.portrait-left-heading-text-right {
  display: grid;
  @media screen and (min-width: map-get($grid-breakpoints, "sm")) {
    grid-template-columns: 1fr 3fr;
    grid-column-gap: 30px;
    grid-row-gap: 15px;
    .portrait {
      grid-row: span 2;
      float: left;  // MS FALLBACKS
      padding-right: 20px;  // MS FALLBACKS
      @supports (display: grid) { // MS FALLBACKS
        padding: 0px;
      } // MS FALLBACKS
    }
  }
  .portrait {
    width: 100%;
    padding-bottom: 10px;
    justify-self: center;
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

// Special Columns
.grid-col-1 {
  > * {
    grid-column: col1 / col12;
  }
}
.grid-col-1-2 {
  // display: grid;
  // align-items: center;
  // grid-gap: var(--spacer-lg);
  // justify-items: baseline; // Needed for hero CTA
  // @media (min-width: map-get($grid-breakpoints, "lg")){ 
  //   grid-template-columns: 1fr 2fr;
  // }
  & > * {
    grid-column: col1 / col12;
  }
  @media (min-width: map-get($grid-breakpoints, "md")){ 
    > :nth-child(2n+1){
      grid-column: col1 / col4;
    }
    > :nth-child(2n){
      grid-column: col5 / col12;
    }
  }
}
.grid-col-1-2-1 {
  // display: grid;
  // grid-gap: var(--spacer-md, 10px);
  // align-items: start;
  @media (min-width: map-get($grid-breakpoints, "md")){ 
    grid-template-columns: 1fr 2fr 1fr;
  }
}
.grid-col-1-4-1 {
  display: grid;
  grid-gap: var(--spacer-md, 10px);
  align-items: start;
  @media (min-width: map-get($grid-breakpoints, "md")){ 
    grid-template-columns: 1fr 4fr 1fr;
  }
}
.grid-col-1-3 {
  // display: grid;
  // grid-gap: var(--spacer-md, 10px);
  // align-items: start;
  @media (min-width: map-get($grid-breakpoints, "sm")){ 
    > :nth-child(2n+1){
      grid-column: col1 / col3;
    }
    > :nth-child(2n){
      grid-column: col4 / col12;
    }
  }
}
// @TODO: replace with actual '.grid-col-2' scss
.grid-col-2 {
  @media (max-width: map-get($grid-breakpoints, "md") - 1) { 
    grid-template-columns: repeat(2, 1fr);
  }
}
.grid-col-2-1 {
  // display: grid;
  // align-items: center;
  // grid-gap: var(--spacer-lg);
  // justify-items: baseline; // Needed for hero CTA
  // @media (min-width: map-get($grid-breakpoints, "lg")){ 
  //   grid-template-columns: 2fr 1fr;
  // }
  & > * {
    grid-column: col1 / col12;
  }
  @media (min-width: map-get($grid-breakpoints, "md")){ 
    > :nth-child(2n+1){
      grid-column: col1 / col8;
    }
    > :nth-child(2n){
      grid-column: col9 / col12;
    }
    grid-gap: var(--spacer-lg);
  }
}
.grid-col-2-3 {
  // display: grid;
  // align-items: center;
  // grid-gap: var(--spacer-lg);
  // justify-items: baseline; // Needed for hero CTA
  // @media (min-width: map-get($grid-breakpoints, "lg")){ 
  //   grid-template-columns: 2fr 3fr; width: 100%;
  // }
  > :nth-child(2n+1){
    grid-column: col1 / col5;
  }
  > :nth-child(2n){
    grid-column: col6 / col12;
  }
}
.grid-col-3-1 {
  // display: grid;
  // align-items: center;
  // grid-gap: var(--spacer-lg);
  // justify-items: baseline; // Needed for hero CTA
  // @media (min-width: map-get($grid-breakpoints, "lg")){ 
    // grid-template-columns: 3fr 1fr;
  // }
  > :nth-child(2n+1){
    grid-column: col1 / col9;
  }
  > :nth-child(2n){
    grid-column: col10 / col12;
  }
}
.grid-col-3 {
  @media (max-width: map-get($grid-breakpoints, "md") - 1) { 
    grid-template-columns: 1fr;
  }
}
.grid-col-4 {
  @media (max-width: map-get($grid-breakpoints, "md") - 1) { 
    grid-template-columns: repeat(2, 1fr);
  }
  @media (max-width: 380px) { 
    grid-template-columns: repeat(1, 1fr);
  }
}
.grid-col-6 {
  grid-gap: var(--spacer-sm);
  @media (max-width: map-get($grid-breakpoints, "md") - 1) { 
    grid-template-columns: repeat(3, 1fr);
  }
  @media (max-width: map-get($grid-breakpoints, "sm") - 1) { 
    grid-template-columns: repeat(2, 1fr);
  }
  @media (max-width: 380px) { 
    grid-template-columns: repeat(1, 1fr);
  }
}
.grid-col-2-tight {
  @extend .grid-col-2;
  grid-gap: $spacer;
}


.form-grid {
  display: grid;
  grid-gap: 1em;
  grid-template-columns: repeat(6, 1fr);
  & > * {
    grid-column: 1/-1;
  }
  & > .half {
    grid-column: auto / span 3;
  }
  & > .one-third {
    grid-column: auto / span 2;
  }
  & > .two-thirds {
    grid-column: auto / span 4;
  }
}

.grid-3-by-3 {
  width: 100%;
  height: 100%;
  display: grid;
  grid-template: 1fr 1fr 1fr / 1fr 1fr 1fr;
  grid-template-areas:
      "tl tc tr"
      "cl cc cr"
      "bl bc br";

}

.grid-img-left {
  display: grid;
  grid-template-columns: 1fr 4fr;
  grid-column-gap: 10px;
  grid-template-rows: repeat(auto-fit, minmax(auto, 1.5em));
  & > * {
    grid-column: 2;
    &:first-child {
      grid-column: 1;
      grid-row: 1/-1;
    }
  }
}
.grid-col-auto {
  display: grid;
  grid-gap: var(--spacer-sm);
  grid-template-columns: repeat(auto-fit, minmax(345px, 1fr));
}

.grid-two-top-one-bottom {
  display: grid;
  grid-gap: var(--spacer-sm);
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(2, auto);
  grid-template-areas: "first"
                       "second"
                       "third";
}
.grid-two-top-one-bottom>div:first-child {
  grid-area: first;
}
.grid-two-top-one-bottom>div:nth-child(2) {
  grid-area: second;
}
.grid-two-top-one-bottom>div:nth-child(3) {
  grid-area: third;
}


@media (min-width: map-get($grid-breakpoints, "sm")) {
  .grid-3-by-2 {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    grid-template-areas: 
    "img1 img2 img3"
    "text1 text2 text3"
  }
  .img1 {
    grid-area: img1;
  }
  .img2 {
    grid-area: img2;
  }
  .img3 {
    grid-area: img3;
  }
  .text1 {
    grid-area: text1;
  }
  .text2 {
    grid-area: text2;
  }
  .text3 {
    grid-area: text3;
  }

  .grid-two-top-one-bottom {
  grid-template-areas: "first first second second"
                       "  .   third  third    .  ";
  }
}

// pdp grid additions
// MIXINS
@mixin column-variants($parent, $column) {
  #{$parent} {
    display: grid;
    grid-gap: var(--spacer-lg);
    @media (min-width: map-get($grid-breakpoints, "lg")){ 
      grid-template-columns: repeat($column, 1fr);
    }
  }
}

// CONSTRUCTORS
@each $column, $value in $columns {
  @include column-variants(".grid-col-#{$column}", $value);
}

.grid-col-1-2-1 {
  display: grid;
  grid-gap: var(--spacer-lg);
  align-items: start;
  @media (min-width: map-get($grid-breakpoints, "lg")){ 
    grid-template-columns: 1fr 2fr 1fr;
  }
}

.grid-col-1-3 {
  display: grid;
  align-items: center;
  grid-gap: var(--spacer-md);
  justify-items: baseline; // Needed for hero CTA
  // @media (min-width: map-get($grid-breakpoints, "lg")){ 
  //   grid-template-columns: 1fr 3fr;
  // }
}

.grid-col-2-3 {
  display: grid;
  align-items: center;
  grid-gap: var(--spacer-lg);
  justify-items: baseline; // Needed for hero CTA
  @media (min-width: map-get($grid-breakpoints, "lg")){ 
    grid-template-columns: 2fr 3fr;
    width: 100%;
  }
}

.grid-col-3-1 {
  display: grid;
  align-items: center;
  grid-gap: var(--spacer-lg);
  justify-items: baseline; // Needed for hero CTA
  @media (min-width: map-get($grid-breakpoints, "lg")){ 
    grid-template-columns: 3fr 1fr;
  }
}

.grid-col-3-1-tight {
  display: grid;
  grid-gap: var(--spacer-sm);
  justify-items: baseline; // Needed for hero CTA
  @media (min-width: map-get($grid-breakpoints, "lg")){ 
    grid-template-columns: 3fr 1fr;
  }
}

.grid-col-2-1 {
  display: grid;
  grid-gap: var(--spacer-md);
  justify-items: baseline; // Needed for hero CTA
  @media (min-width: map-get($grid-breakpoints, "lg")){ 
    grid-template-columns: 2fr 1fr;
  }
}

.grid-col-1-2 {
  display: grid;
  align-items: center;
  grid-gap: var(--spacer-lg);
  justify-items: baseline; // Needed for hero CTA
  // @media (min-width: map-get($grid-breakpoints, "lg")){ 
  //   grid-template-columns: 1fr 2fr;
  // }
}

.grid-col-2-tight {
  @extend .grid-col-2;
  grid-gap: $spacer;
}

.align-self-end {
  -ms-flex-item-align: end !important;
      align-self: flex-end !important;
}

.flex {
  display: flex;
}

.flex-end {
  justify-content: flex-end;
}
