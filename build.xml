<?xml version="1.0"?>

<!--
  @file build.xml
  Build targets for this project. This file should be customized for your project.

  For a full list of targets, try:
    phing -l

  @see https://github.com/palantirnet/the-build
  -->

<project name="html" default="list">

    <!-- Add property loading and targets from palantirnet/the-build. -->
    <import file="vendor/palantirnet/the-build/targets/the-build.xml" />

    <!-- Make these additional targets available by default. -->
    <import file="vendor/palantirnet/the-build/targets/drupal.xml" />

    <!-- Additional optional targets. -->
    <import file="vendor/palantirnet/the-build/targets/artifact.xml" />
    <!-- EDIT: Removed the Acquia import.  -->
    <import file="vendor/palantirnet/the-build/targets/styleguide.xml" />

    <!-- Target: build -->
    <target name="build" depends="set-site" description="Build the application.">
        <!-- Create the Drupal custom code directories. -->
        <foreach list="${drupal.create_dirs}" param="dir" target="mkdir" />

        <!-- Set permissions on the sites subdirectory. -->
        <mkdir dir="${drupal.root}/sites/${drupal.site.dir}" />
        <chmod file="${drupal.root}/sites/${drupal.site.dir}" mode="750" />

        <!-- Create the public files directory and make it world writable. -->
        <mkdir dir="${drupal.root}/${drupal.site.settings.file_public_path}" />
        <chmod file="${drupal.root}/${drupal.site.settings.file_public_path}" mode="744" />

        <!-- Create the private files directory and make it private. -->
        <mkdir dir="${drupal.root}/${drupal.site.settings.file_private_path}" />
        <chmod file="${drupal.root}/${drupal.site.settings.file_private_path}" mode="640" />

        <!-- Copy the settings.build.php and services.build.php templates into place. -->
        <copy todir="${build.dir}" overwrite="true" mode="544">
            <!-- Copy the template files -->
            <filelist dir="${build.dir}" files="${drupal.site.build.settings_template},${drupal.site.build.services_template}" />
            <!-- Map templates to their destinations -->
            <mapper type="firstmatch">
                <mapper type="glob" from="${drupal.site.build.settings_template}" to="${drupal.site.build.settings_dest}" />
                <mapper type="glob" from="${drupal.site.build.services_template}" to="${drupal.site.build.services_dest}" />
            </mapper>
            <!-- Substitute property values -->
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <!-- Build the styleguide only if it hasn't been run before -->
        <resolvepath propertyName="styleguide.root.resolved" file="${styleguide.root}" dir="${build.dir}" />
        <if>
            <!-- Just checking for a file that should have been generated. -->
            <not><available file="${styleguide.root.resolved}/dist/css/all.css" type="file" /></not>
            <then>
                <phingcall target="styleguide" />
            </then>
        </if>

    </target>

    <!-- Target: install
         Running this target will also run the build target.
         -->
    <target name="install" depends="set-site,build,drupal-validate-clean-config,drupal-has-database-connection" description="Install the application.">
        <drush command="site-install" assume="yes">
            <option name="site-name">${projectname}</option>
            <option name="account-name">${drupal.site.admin_user}</option>
            <option name="account-pass">admin</option>
            <option name="existing-config" />
        </drush>
    </target>

  <!-- Target: reload
       Reloads configuration for the site.
       -->
  <target name="reload" depends="set-site,build,drupal-has-database-connection" description="Load configuration and clear the cache.">
    <drush command="cache:rebuild" assume="yes" />
    <drush command="config:import" assume="yes" />
  </target>

    <!-- Target: load -->
<!--    <target name="load" depends="set-site" description="Load a database dump.">-->
<!--        <phingcall target="drupal-load-db" />-->
<!--        <drush command="cache-rebuild" />-->
<!--    </target>-->

    <!-- Target: artifact -->
    <target name="artifact" description="Build and deploy the application.">
        <phing phingfile="build.xml" target="artifact-main" inheritAll="false">
            <property name="build.env" value="pantheon" />
        </phing>
    </target>

    <!-- Default target: list -->
    <target name="list" hidden="true">
        <exec command="phing -q -f ${phing.file} -l" passthru="true"/>
        <echo>Find more documentation for palantirnet/the-build on GitHub:

            https://github.com/palantirnet/the-build#using-the-build</echo>
    </target>

    <!--
        Target: styleguide-exists

        For this project, the styleguide doesn't use a PHP-based styleguide, so we don't
        look for composer.json/composer.lock
    -->
    <target name="styleguide-exists" hidden="true">
        <resolvepath propertyName="styleguide.root.resolved" file="${styleguide.root}" dir="${build.dir}" />
        <echo>Looking for style guide at '${styleguide.root.resolved}'</echo>

        <if>
            <and>
                <available file="${styleguide.root.resolved}" type="dir" />
                <available file="${styleguide.root.resolved}/package.json" type="file" />
            </and>
            <then>
                <property name="styleguide.exists" value="1" />
                <echo>Style guide found.</echo>
            </then>
            <else>
                <echo>No style guide found.</echo>
            </else>
        </if>
    </target>

    <!--
        Target: styleguide-install

        Install the styleguide dependencies with composer and yarn.

        This is copy-pasted from the corresponding function in the-build, except that it:
        * Doesn't check for the platform-specific node-sass binding
        * Doesn't try to install composer at the styleguide level
        -->
    <target name="styleguide-install" depends="styleguide-exists-or-else" hidden="true">
        <!-- Run yarn install in the styleguide. -->
        <if>
            <and>
                <available file="${styleguide.root.resolved}/package.lock" type="file" />
            </and>
            <then>
                <exec dir="${styleguide.root.resolved}" command="npm install --non-interactive --no-progress --prefer-offline" passthru="true" checkreturn="true" />
            </then>
        </if>
    </target>


</project>
